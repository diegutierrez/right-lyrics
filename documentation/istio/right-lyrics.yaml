apiVersion: v1
kind: Template
metadata:
  name: right-lyrics-template
objects:
#
# Albums Service
#
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: albums-mariadb
    name: albums-mariadb
  stringData:
    user: rl
    password: rl
    database: rl
  type: Opaque
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: albums-mariadb
      app.openshift.io/runtime: mariadb
      app.kubernetes.io/part-of: right-lyrics
    name: albums-mariadb
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: albums-mariadb
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: albums-mariadb
      spec:
        containers:
          - image: registry.access.redhat.com/rhscl/mariadb-102-rhel7
            imagePullPolicy: Always
            name: albums-mariadb
            ports:
              - containerPort: 3306
            env:
              - name: DATABASE_SERVICE_NAME
                value: albums-mariadb
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    key: user
                    name: albums-mariadb
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: albums-mariadb
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: albums-mariadb
              - name: MYSQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database
                    name: albums-mariadb
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: albums-mariadb
    name: albums-mariadb
  spec:
    ports:
      - name: tcp-3306
        port: 3306
        protocol: TCP
        targetPort: 3306
    selector:
      app: albums-mariadb
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: albums-mariadb
    labels:
      app: albums-service
      app.openshift.io/runtime: quarkus
      app.kubernetes.io/part-of: right-lyrics
    name: albums-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: albums-service
    strategy:
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: albums-service
      spec:
        containers:
          - image: quay.io/right-lyrics/albums-service:1.0
            env:
              - name: QUARKUS_DATASOURCE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: albums-mariadb
                    key: password
              - name: QUARKUS_DATASOURCE_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: albums-mariadb
                    key: user
              - name: QUARKUS_DATASOURCE_JDBC_URL
                value: jdbc:mysql://albums-mariadb:3306/rl
            imagePullPolicy: Always
            name: albums-service
            ports:
              - containerPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: albums-service
    name: albums-service
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: albums-service    
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: albums-service
    name: albums-service
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: albums-service  
#
# Hits Service
#                 
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: hits-redis
    name: hits-redis
  stringData:
    password: right-lyrics
  type: Opaque
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: hits-redis
      app.openshift.io/runtime: redis
      app.kubernetes.io/part-of: right-lyrics
    name: hits-redis
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: hits-redis
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: hits-redis
      spec:
        containers:
          - image: centos/redis-5-centos7
            imagePullPolicy: Always
            name: hits-redis
            ports:
              - containerPort: 6379
            env:
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: hits-redis
                    key: password
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: hits-redis
    name: hits-redis
  spec:
    ports:
      - name: tcp-6379
        port: 6379
        protocol: TCP
        targetPort: 6379
    selector:
      app: hits-redis
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: hits-redis
    labels:
      app: hits-service
      app.openshift.io/runtime: python
      app.kubernetes.io/part-of: right-lyrics
    name: hits-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: hits-service
    strategy:
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: hits-service
      spec:
        containers:
          - image: quay.io/right-lyrics/hits-service:1.1
            imagePullPolicy: Always
            name: hits-service
            env:
              - name: DB_HOST
                value: hits-redis
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: hits-redis
                    key: password
            ports:
              - containerPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: hits-service
    name: hits-service
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: hits-service
#
# Import Service
#
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: right-lyrics-data
  data:
    data.yaml: |   
      - title: Californication
        artist: Red Hot Chili Peppers
        coverUrl: https://upload.wikimedia.org/wikipedia/en/d/df/RedHotChiliPeppersCalifornication.jpg
        year: 1999
        songs:
          - name: Californication
            lyrics: |-
              Psychic spies from China try to steal your mind's elation  
              And little girls from Sweden dream of silver screen quotation  
              And if you want these kind of dreams it's Californication  

              It's the edge of the world and all of Western civilization  
              The sun may rise in the East at least it's settled in a final location  
              It's understood that Hollywood sells Californication  

              Pay your surgeon very well to break the spell of aging  
              Celebrity skin, is this your chin, or is that war you're waging?  
              First born unicorn  
              Hardcore soft porn  

              Dream of Californication  
              Dream of Californication  
              Dream of Californication  
              Dream of Californication  

              Marry me, girl, be my fairy to the world, be my very own constellation  
              A teenage bride with a baby inside getting high on information  
              And buy me a star on the boulevard, it's Californication  

              Space may be the final frontier but it's made in a Hollywood basement  
              And Cobain can you hear the spheres singing songs off Station To Station?  
              And Alderaan's not far away, it's Californication  

              Born and raised by those who praise control of population  
              Well, everybody's been there and I don't mean on vacation  
              First born unicorn  
              Hardcore soft porn  

              Dream of Californication  
              Dream of Californication  
              Dream of Californication  
              Dream of Californication  

              Destruction leads to a very rough road but it also breeds creation  
              And earthquakes are to a girl's guitar, they're just another good vibration  
              And tidal waves couldn't save the world from Californication  

              Pay your surgeon very well to break the spell of aging  
              Sicker than the rest, there is no test, but this is what you're craving?  
              First born unicorn  
              Hardcore soft porn  

              Dream of Californication  
              Dream of Californication  
              Dream of Californication  
              Dream of Californication  
      - title: Ten
        artist: Pearl Jam
        coverUrl: https://upload.wikimedia.org/wikipedia/en/2/2d/PearlJam-Ten2.jpg
        year: 1991
        songs:
          - name: Even Flow
            lyrics: |-
              Freezin' rests his head on a pillow made of concrete again ooh yeah  
              Oh feelin' maybe he'll see a little betters any days ooh yeah  
              Oh hand out faces that he sees come again ain't that familiar  
              Oh dark grin he can't help when he's happy he looks insane  

              Even flow  
              Thoughts arrive like butterflies  
              Oh he don't know, so he chases them away  
              Someday yet he'll begin his life again  
              Life again, life again  

              Kneelin' looking through the paper though he doesn't know to read, ooh yeah  
              Oh, prayin', now to something that has never showed him anything  
              Oh, feelin', understands the weather or that winters on its way  
              Oh, ceilings, few and far between all the legal halls of shame, yeah  

              Even flow  
              Thoughts arrive like butterflies  
              Oh, he don't know, so he chases them away  

              Someday yet he'll begin his life again  
              Oh whispering hands, gently lead him away  
              Him away, him away  
              Yeah  
              Woo  
              Oh yeah yeah fuck it up  

              Even flow  
              Thoughts arrive like butterflies  
              Oh, he don't know, so he chases them away  

              Someday yet he'll begin his life again  
              Oh whispering hands, gently lead him away  
              Him away, him away  
              Yeah!  
              Woo  
              Uh huh yeah  
              Yeah yeah mommy, mommy  
      - title: The Colour And The Shape
        artist: Foo Fighters
        coverUrl: https://upload.wikimedia.org/wikipedia/en/0/0d/FooFighters-TheColourAndTheShape.jpg
        year: 1997
        songs:
          - name: Everlong
            lyrics: |-
              Hello  
              I've waited here for you  
              Everlong  

              Tonight I throw myself in two  
              Out of the red  
              Out of her head she sang  

              Come down and waste away with me  
              Down with me  
              Slow, how you wanted it to be  
              I'm over my head  
              Out of her head she sang  

              And I wonder  
              When I sing along with you  
              If everything could ever feel this real forever  
              If anything could ever be this good again  
              The only thing I'll ever ask of you  
              You've got to promise not to stop when I say when  
              She sang  

              Breathe out  
              So I can breathe you in  
              Hold you in  
              And now  
              I know you've always been  
              Out of your head  
              Out of my head I sang  

              And I wonder  
              When I sing along with you  
              If everything could ever feel this real forever  
              If anything could ever be this good again  
              The only thing I'll ever ask of you  
              You've got to promise not to stop when I say when  
              She sang  

              And I wonder  
              If everything could ever feel this real forever  
              If anything could ever be this good again  
              The only thing I'll ever ask of you  
              You've got to promise not to stop when I say when
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: import-data
  spec:
    template:
      spec:
        volumes:
          - configMap:
              name: right-lyrics-data
            name: right-lyrics-data
        containers:
          - name: import
            image: registry.access.redhat.com/ubi8
            command: ["/bin/sh"]
            args: ["-c", "sleep 180; curl -v -F uploadedFile=@/tmp/data.yaml http://import-service:8080/api/import/upload"]
            volumeMounts:
              - mountPath: /tmp/data.yaml
                name: right-lyrics-data
                subPath: data.yaml
        restartPolicy: Never
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: songs-service,albums-service,lyrics-service
    labels:
      app: import-service
      app.openshift.io/runtime: quarkus
      app.kubernetes.io/part-of: right-lyrics
    name: import-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: import-service
    strategy:
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: import-service
      spec:
        containers:
          - image: quay.io/right-lyrics/import-service:1.0
            env:
              - name: ALBUMS_SERVICE_BASE_URL
                value: http://albums-service:8080
              - name: SONGS_SERVICE_BASE_URL
                value: http://songs-service:8080
              - name: LYRICS_SERVICE_BASE_URL
                value: http://lyrics-service:8080
            imagePullPolicy: Always
            name: import-service
            ports:
              - containerPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: import-service
    name: import-service
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: import-service
#
# Keycloak
#
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: right-lyrics-realm
  data:
    right-lyrics-realm.json: |
      {
        "id": "right-lyrics",
        "realm": "right-lyrics",
        "notBefore": 0,
        "revokeRefreshToken": false,
        "refreshTokenMaxReuse": 0,
        "accessTokenLifespan": 300,
        "accessTokenLifespanForImplicitFlow": 900,
        "ssoSessionIdleTimeout": 1800,
        "ssoSessionMaxLifespan": 36000,
        "ssoSessionIdleTimeoutRememberMe": 0,
        "ssoSessionMaxLifespanRememberMe": 0,
        "offlineSessionIdleTimeout": 2592000,
        "offlineSessionMaxLifespanEnabled": false,
        "offlineSessionMaxLifespan": 5184000,
        "clientSessionIdleTimeout": 0,
        "clientSessionMaxLifespan": 0,
        "clientOfflineSessionIdleTimeout": 0,
        "clientOfflineSessionMaxLifespan": 0,
        "accessCodeLifespan": 60,
        "accessCodeLifespanUserAction": 300,
        "accessCodeLifespanLogin": 1800,
        "actionTokenGeneratedByAdminLifespan": 43200,
        "actionTokenGeneratedByUserLifespan": 300,
        "enabled": true,
        "sslRequired": "none",
        "registrationAllowed": true,
        "registrationEmailAsUsername": false,
        "rememberMe": false,
        "verifyEmail": false,
        "loginWithEmailAllowed": true,
        "duplicateEmailsAllowed": false,
        "resetPasswordAllowed": false,
        "editUsernameAllowed": false,
        "bruteForceProtected": false,
        "permanentLockout": false,
        "maxFailureWaitSeconds": 900,
        "minimumQuickLoginWaitSeconds": 60,
        "waitIncrementSeconds": 60,
        "quickLoginCheckMilliSeconds": 1000,
        "maxDeltaTimeSeconds": 43200,
        "failureFactor": 30,
        "defaultRoles": [
          "uma_authorization",
          "offline_access"
        ],
        "requiredCredentials": [
          "password"
        ],
        "otpPolicyType": "totp",
        "otpPolicyAlgorithm": "HmacSHA1",
        "otpPolicyInitialCounter": 0,
        "otpPolicyDigits": 6,
        "otpPolicyLookAheadWindow": 1,
        "otpPolicyPeriod": 30,
        "otpSupportedApplications": [
          "FreeOTP",
          "Google Authenticator"
        ],
        "webAuthnPolicyRpEntityName": "keycloak",
        "webAuthnPolicySignatureAlgorithms": [
          "ES256"
        ],
        "webAuthnPolicyRpId": "",
        "webAuthnPolicyAttestationConveyancePreference": "not specified",
        "webAuthnPolicyAuthenticatorAttachment": "not specified",
        "webAuthnPolicyRequireResidentKey": "not specified",
        "webAuthnPolicyUserVerificationRequirement": "not specified",
        "webAuthnPolicyCreateTimeout": 0,
        "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
        "webAuthnPolicyAcceptableAaguids": [],
        "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
        "webAuthnPolicyPasswordlessSignatureAlgorithms": [
          "ES256"
        ],
        "webAuthnPolicyPasswordlessRpId": "",
        "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
        "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
        "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
        "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
        "webAuthnPolicyPasswordlessCreateTimeout": 0,
        "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
        "webAuthnPolicyPasswordlessAcceptableAaguids": [],
        "scopeMappings": [
          {
            "clientScope": "offline_access",
            "roles": [
              "offline_access"
            ]
          }
        ],
        "clientScopeMappings": {
          "account": [
            {
              "client": "account-console",
              "roles": [
                "manage-account"
              ]
            }
          ]
        },
        "clients": [
          {
            "id": "fcee6463-4a50-4731-a5ac-cb16c9d521a4",
            "clientId": "account",
            "name": "${client_account}",
            "rootUrl": "${authBaseUrl}",
            "baseUrl": "/realms/right-lyrics/account/",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "defaultRoles": [
              "view-profile",
              "manage-account"
            ],
            "redirectUris": [
              "/realms/right-lyrics/account/*"
            ],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": false,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {},
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "2fda0cea-fbb7-4267-874e-20817d30b641",
            "clientId": "account-console",
            "name": "${client_account-console}",
            "rootUrl": "${authBaseUrl}",
            "baseUrl": "/realms/right-lyrics/account/",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "redirectUris": [
              "/realms/right-lyrics/account/*"
            ],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "pkce.code.challenge.method": "S256"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "protocolMappers": [
              {
                "id": "5afea5d9-be91-4425-a3c0-069a128888c2",
                "name": "audience resolve",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-audience-resolve-mapper",
                "consentRequired": false,
                "config": {}
              }
            ],
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "309d8448-3d68-4327-aa79-b2ecbaf20f43",
            "clientId": "admin-cli",
            "name": "${client_admin-cli}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "redirectUris": [],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {},
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "042185a8-56fe-405b-884f-a5f62135b4e8",
            "clientId": "broker",
            "name": "${client_broker}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "redirectUris": [],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": false,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {},
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "035d50d3-9d55-483e-8a2c-bf55273441c7",
            "clientId": "lyrics-page",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "redirectUris": [            
              "http://lyrics-page-${NAMESPACE}.${WILDCARD_DOMAIN}/*"
            ],
            "webOrigins": [
              "*"
            ],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "saml.assertion.signature": "false",
              "saml.force.post.binding": "false",
              "saml.multivalued.roles": "false",
              "saml.encrypt": "false",
              "saml.server.signature": "false",
              "saml.server.signature.keyinfo.ext": "false",
              "exclude.session.state.from.auth.response": "false",
              "saml_force_name_id_format": "false",
              "saml.client.signature": "false",
              "tls.client.certificate.bound.access.tokens": "false",
              "saml.authnstatement": "false",
              "display.on.consent.screen": "false",
              "saml.onetimeuse.condition": "false"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": true,
            "nodeReRegistrationTimeout": -1,
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "f76afc24-bdc4-40ce-86af-f6165624f803",
            "clientId": "realm-management",
            "name": "${client_realm-management}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "redirectUris": [],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": true,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": false,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {},
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "8864e17b-c219-41e2-87a3-afdd40312789",
            "clientId": "security-admin-console",
            "name": "${client_security-admin-console}",
            "rootUrl": "${authAdminUrl}",
            "baseUrl": "/admin/right-lyrics/console/",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret": "**********",
            "redirectUris": [
              "/admin/right-lyrics/console/*"
            ],
            "webOrigins": [
              "+"
            ],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "pkce.code.challenge.method": "S256"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "protocolMappers": [
              {
                "id": "002c74d3-99d8-4905-be7d-ba9df156dd8c",
                "name": "locale",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "locale",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "locale",
                  "jsonType.label": "String"
                }
              }
            ],
            "defaultClientScopes": [
              "web-origins",
              "role_list",
              "profile",
              "roles",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          }
        ],
        "clientScopes": [
          {
            "id": "df358e11-3542-4018-8b68-01a684f93702",
            "name": "address",
            "description": "OpenID Connect built-in scope: address",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "true",
              "consent.screen.text": "${addressScopeConsentText}"
            },
            "protocolMappers": [
              {
                "id": "8cf6605c-3cd9-4671-80f7-7928de4c5e84",
                "name": "address",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-address-mapper",
                "consentRequired": false,
                "config": {
                  "user.attribute.formatted": "formatted",
                  "user.attribute.country": "country",
                  "user.attribute.postal_code": "postal_code",
                  "userinfo.token.claim": "true",
                  "user.attribute.street": "street",
                  "id.token.claim": "true",
                  "user.attribute.region": "region",
                  "access.token.claim": "true",
                  "user.attribute.locality": "locality"
                }
              }
            ]
          },
          {
            "id": "b1bd3094-429a-4dad-a685-e4a29d94d1eb",
            "name": "email",
            "description": "OpenID Connect built-in scope: email",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "true",
              "consent.screen.text": "${emailScopeConsentText}"
            },
            "protocolMappers": [
              {
                "id": "41d30a99-dd77-4f2d-a2f4-b9c23e22946a",
                "name": "email",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "email",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "email",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "ad9ae40e-aaa0-49f2-993e-6bb42e187b29",
                "name": "email verified",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "emailVerified",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "email_verified",
                  "jsonType.label": "boolean"
                }
              }
            ]
          },
          {
            "id": "524295fc-5eb3-486b-9a85-e52e85f1ca7b",
            "name": "microprofile-jwt",
            "description": "Microprofile - JWT built-in scope",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "false"
            },
            "protocolMappers": [
              {
                "id": "36c693ea-3532-4ad0-9daa-a27d024a3659",
                "name": "groups",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-realm-role-mapper",
                "consentRequired": false,
                "config": {
                  "multivalued": "true",
                  "user.attribute": "foo",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "groups",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "f1f3be9a-95ac-46e7-9d7f-7172c469be5d",
                "name": "upn",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "username",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "upn",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "id": "cf77e8fe-6c3f-43e7-9522-17b9018224d2",
            "name": "offline_access",
            "description": "OpenID Connect built-in scope: offline_access",
            "protocol": "openid-connect",
            "attributes": {
              "consent.screen.text": "${offlineAccessScopeConsentText}",
              "display.on.consent.screen": "true"
            }
          },
          {
            "id": "e9243713-685b-44b1-a5e1-eb12207bc1f4",
            "name": "phone",
            "description": "OpenID Connect built-in scope: phone",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "true",
              "consent.screen.text": "${phoneScopeConsentText}"
            },
            "protocolMappers": [
              {
                "id": "e5ff711e-f82b-4f7c-8d1a-f1bf0b9d3176",
                "name": "phone number",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "phoneNumber",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "phone_number",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "cacf2d5d-821e-4630-bddc-5af230c723af",
                "name": "phone number verified",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "phoneNumberVerified",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "phone_number_verified",
                  "jsonType.label": "boolean"
                }
              }
            ]
          },
          {
            "id": "9794f431-a285-46e6-a1d1-8a765d090856",
            "name": "profile",
            "description": "OpenID Connect built-in scope: profile",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "true",
              "consent.screen.text": "${profileScopeConsentText}"
            },
            "protocolMappers": [
              {
                "id": "c753fa77-f3d8-43ad-9bc0-34160bcf0acd",
                "name": "given name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "firstName",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "given_name",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "f89b9c5b-e3ca-4552-a54c-98a33e03e482",
                "name": "username",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "username",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "preferred_username",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "86e77885-e809-4850-b0df-a557c777385b",
                "name": "full name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-full-name-mapper",
                "consentRequired": false,
                "config": {
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "userinfo.token.claim": "true"
                }
              },
              {
                "id": "04f92a78-736b-4998-9ec5-1eb8858437a0",
                "name": "family name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "lastName",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "family_name",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "2e005810-3b8e-443e-b6ef-925f99e06a52",
                "name": "picture",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "picture",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "picture",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "46af7ace-471a-4ebb-af04-8b7095d769f4",
                "name": "nickname",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "nickname",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "nickname",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "2679c3ae-2021-48e7-b5de-4d754680b858",
                "name": "gender",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "gender",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "gender",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "11c7c49e-4cbd-4df6-ae61-ee943696e4ed",
                "name": "updated at",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "updatedAt",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "updated_at",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "6443ff8d-c757-4dc7-9e53-e1cb5a8dfd5a",
                "name": "profile",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "profile",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "profile",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "df46a4bf-37ed-449b-9328-b8201fb1d11c",
                "name": "website",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "website",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "website",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "293023a1-2bf4-491e-9004-cce5be7824c2",
                "name": "middle name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "middleName",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "middle_name",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "815b3263-bdaa-492a-ba3e-918269aa9f53",
                "name": "birthdate",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "birthdate",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "birthdate",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "2076eb23-16ae-4187-86f8-f6d7ab66276c",
                "name": "zoneinfo",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "zoneinfo",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "zoneinfo",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "9a817292-bf40-45c6-a4c3-30d182cf3f31",
                "name": "locale",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "userinfo.token.claim": "true",
                  "user.attribute": "locale",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "locale",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "id": "1cb52db8-2767-4c63-b448-e594b32483e8",
            "name": "role_list",
            "description": "SAML role list",
            "protocol": "saml",
            "attributes": {
              "consent.screen.text": "${samlRoleListScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "9dadcfd4-1264-4ab2-b3ca-554af05f73e1",
                "name": "role list",
                "protocol": "saml",
                "protocolMapper": "saml-role-list-mapper",
                "consentRequired": false,
                "config": {
                  "single": "false",
                  "attribute.nameformat": "Basic",
                  "attribute.name": "Role"
                }
              }
            ]
          },
          {
            "id": "df945aa9-5d86-4d22-a17f-01e1036cab79",
            "name": "roles",
            "description": "OpenID Connect scope for add user roles to the access token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "false",
              "display.on.consent.screen": "true",
              "consent.screen.text": "${rolesScopeConsentText}"
            },
            "protocolMappers": [
              {
                "id": "a192a6b2-0389-42cb-8fd5-2d1905f66d72",
                "name": "audience resolve",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-audience-resolve-mapper",
                "consentRequired": false,
                "config": {}
              },
              {
                "id": "a21c263c-e6eb-411e-8b19-b44ff53cfc1d",
                "name": "realm roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-realm-role-mapper",
                "consentRequired": false,
                "config": {
                  "multivalued": "true",
                  "user.attribute": "foo",
                  "access.token.claim": "true",
                  "claim.name": "realm_access.roles",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "096723cd-e6f1-455b-bf84-d6eaaba6245f",
                "name": "client roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-client-role-mapper",
                "consentRequired": false,
                "config": {
                  "multivalued": "true",
                  "user.attribute": "foo",
                  "access.token.claim": "true",
                  "claim.name": "resource_access.${client_id}.roles",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "id": "50b9b556-f0ba-4ac4-a836-26054ad1138d",
            "name": "web-origins",
            "description": "OpenID Connect scope for add allowed web origins to the access token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "false",
              "display.on.consent.screen": "false",
              "consent.screen.text": ""
            },
            "protocolMappers": [
              {
                "id": "575b2d78-8ed7-4bdc-a17d-e300d0df9f2d",
                "name": "allowed web origins",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-allowed-origins-mapper",
                "consentRequired": false,
                "config": {}
              }
            ]
          }
        ],
        "defaultDefaultClientScopes": [
          "role_list",
          "web-origins",
          "profile",
          "email",
          "roles"
        ],
        "defaultOptionalClientScopes": [
          "microprofile-jwt",
          "offline_access",
          "address",
          "phone"
        ],
        "browserSecurityHeaders": {
          "contentSecurityPolicyReportOnly": "",
          "xContentTypeOptions": "nosniff",
          "xRobotsTag": "none",
          "xFrameOptions": "SAMEORIGIN",
          "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
          "xXSSProtection": "1; mode=block",
          "strictTransportSecurity": "max-age=31536000; includeSubDomains"
        },
        "smtpServer": {},
        "eventsEnabled": false,
        "eventsListeners": [
          "jboss-logging"
        ],
        "enabledEventTypes": [],
        "adminEventsEnabled": false,
        "adminEventsDetailsEnabled": false,
        "components": {
          "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
            {
              "id": "6f981424-f320-4c98-b150-066581e6e3ea",
              "name": "Allowed Protocol Mapper Types",
              "providerId": "allowed-protocol-mappers",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "allowed-protocol-mapper-types": [
                  "saml-user-attribute-mapper",
                  "saml-user-property-mapper",
                  "oidc-usermodel-property-mapper",
                  "saml-role-list-mapper",
                  "oidc-sha256-pairwise-sub-mapper",
                  "oidc-usermodel-attribute-mapper",
                  "oidc-address-mapper",
                  "oidc-full-name-mapper"
                ]
              }
            },
            {
              "id": "7bc662fd-ef52-4d89-a497-8f78de9f97fc",
              "name": "Allowed Protocol Mapper Types",
              "providerId": "allowed-protocol-mappers",
              "subType": "authenticated",
              "subComponents": {},
              "config": {
                "allowed-protocol-mapper-types": [
                  "oidc-usermodel-property-mapper",
                  "saml-user-attribute-mapper",
                  "saml-user-property-mapper",
                  "oidc-sha256-pairwise-sub-mapper",
                  "oidc-address-mapper",
                  "oidc-usermodel-attribute-mapper",
                  "oidc-full-name-mapper",
                  "saml-role-list-mapper"
                ]
              }
            },
            {
              "id": "b948f425-42f4-4028-abba-cdcbb1cd69f5",
              "name": "Allowed Client Scopes",
              "providerId": "allowed-client-templates",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "allow-default-scopes": [
                  "true"
                ]
              }
            },
            {
              "id": "f666f50a-2878-4584-83cf-dd71734235e0",
              "name": "Allowed Client Scopes",
              "providerId": "allowed-client-templates",
              "subType": "authenticated",
              "subComponents": {},
              "config": {
                "allow-default-scopes": [
                  "true"
                ]
              }
            },
            {
              "id": "33f75536-5ebf-4035-b34d-8c441e9f9d35",
              "name": "Full Scope Disabled",
              "providerId": "scope",
              "subType": "anonymous",
              "subComponents": {},
              "config": {}
            },
            {
              "id": "9f24a5ef-fea3-4986-919b-e0cfb8334a1d",
              "name": "Max Clients Limit",
              "providerId": "max-clients",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "max-clients": [
                  "200"
                ]
              }
            },
            {
              "id": "4352e679-5509-4d28-bc0c-5b4029ca1128",
              "name": "Trusted Hosts",
              "providerId": "trusted-hosts",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "host-sending-registration-request-must-match": [
                  "true"
                ],
                "client-uris-must-match": [
                  "true"
                ]
              }
            },
            {
              "id": "e23b8498-3996-4546-9d72-cba8c65734b5",
              "name": "Consent Required",
              "providerId": "consent-required",
              "subType": "anonymous",
              "subComponents": {},
              "config": {}
            }
          ],
          "org.keycloak.keys.KeyProvider": [
            {
              "id": "e5d042cb-8afc-4456-9a78-c7169f2e115a",
              "name": "aes-generated",
              "providerId": "aes-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ]
              }
            },
            {
              "id": "df53f7f3-ed58-4e8d-b6bc-4e7facbc445c",
              "name": "rsa-generated",
              "providerId": "rsa-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ]
              }
            },
            {
              "id": "e9204c92-320a-44e1-9d94-adecd97ef99c",
              "name": "hmac-generated",
              "providerId": "hmac-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ],
                "algorithm": [
                  "HS256"
                ]
              }
            }
          ]
        },
        "internationalizationEnabled": false,
        "supportedLocales": [],
        "authenticationFlows": [
          {
            "id": "98f3992c-fad5-42ac-9285-86cd484fa3c9",
            "alias": "Account verification options",
            "description": "Method with which to verity the existing account",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "idp-email-verification",
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "ALTERNATIVE",
                "priority": 20,
                "flowAlias": "Verify Existing Account by Re-authentication",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "33bad837-9f08-45ef-abbe-d89502b87a49",
            "alias": "Authentication Options",
            "description": "Authentication options.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "basic-auth",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "basic-auth-otp",
                "requirement": "DISABLED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "auth-spnego",
                "requirement": "DISABLED",
                "priority": 30,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "447269ea-175b-4003-abd1-a949245eda31",
            "alias": "Browser - Conditional OTP",
            "description": "Flow to determine if the OTP is required for the authentication",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "auth-otp-form",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "be63f6ef-5ae0-4d5e-a6a9-3978f3b0cde6",
            "alias": "Direct Grant - Conditional OTP",
            "description": "Flow to determine if the OTP is required for the authentication",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "direct-grant-validate-otp",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "4bfd2634-50d6-4d28-adaa-1a829890cef7",
            "alias": "First broker login - Conditional OTP",
            "description": "Flow to determine if the OTP is required for the authentication",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "auth-otp-form",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "3f7d1d81-f8c5-482b-bb8c-d219be79e707",
            "alias": "Handle Existing Account",
            "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "idp-confirm-link",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "REQUIRED",
                "priority": 20,
                "flowAlias": "Account verification options",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "01217955-479d-4cfe-9edc-4d19ae1bf612",
            "alias": "Reset - Conditional OTP",
            "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "reset-otp",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "61de05ca-598b-4dfd-b386-787478409b8c",
            "alias": "User creation or linking",
            "description": "Flow for the existing/non-existing user alternatives",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticatorConfig": "create unique user config",
                "authenticator": "idp-create-user-if-unique",
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "ALTERNATIVE",
                "priority": 20,
                "flowAlias": "Handle Existing Account",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "8d02ef7e-95a5-4775-83a1-eba49ea3634c",
            "alias": "Verify Existing Account by Re-authentication",
            "description": "Reauthentication of existing account",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "idp-username-password-form",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "CONDITIONAL",
                "priority": 20,
                "flowAlias": "First broker login - Conditional OTP",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "8c7d8c62-a75b-4b53-8f21-041635f0500d",
            "alias": "browser",
            "description": "browser based authentication",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "auth-cookie",
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "auth-spnego",
                "requirement": "DISABLED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "identity-provider-redirector",
                "requirement": "ALTERNATIVE",
                "priority": 25,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "ALTERNATIVE",
                "priority": 30,
                "flowAlias": "forms",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "e1a8c834-3349-49d7-885d-bcfc37ab64d1",
            "alias": "clients",
            "description": "Base authentication for clients",
            "providerId": "client-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "client-secret",
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "client-jwt",
                "requirement": "ALTERNATIVE",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "client-secret-jwt",
                "requirement": "ALTERNATIVE",
                "priority": 30,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "client-x509",
                "requirement": "ALTERNATIVE",
                "priority": 40,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "4c4dc7c6-8110-466f-9361-6443aad0bffb",
            "alias": "direct grant",
            "description": "OpenID Connect Resource Owner Grant",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "direct-grant-validate-username",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "direct-grant-validate-password",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "CONDITIONAL",
                "priority": 30,
                "flowAlias": "Direct Grant - Conditional OTP",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "27d709a1-e481-46fc-8faf-14faf82cc5bf",
            "alias": "docker auth",
            "description": "Used by Docker clients to authenticate against the IDP",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "docker-http-basic-authenticator",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "6d7fe09a-615d-4f47-af67-bdf3983f7193",
            "alias": "first broker login",
            "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticatorConfig": "review profile config",
                "authenticator": "idp-review-profile",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "REQUIRED",
                "priority": 20,
                "flowAlias": "User creation or linking",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "57479c8b-e339-414e-8ca0-e9c60272f50f",
            "alias": "forms",
            "description": "Username, password, otp and other auth forms.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "auth-username-password-form",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "CONDITIONAL",
                "priority": 20,
                "flowAlias": "Browser - Conditional OTP",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "6b844f45-c1af-4993-9461-e307577d2acf",
            "alias": "http challenge",
            "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "no-cookie-redirect",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "REQUIRED",
                "priority": 20,
                "flowAlias": "Authentication Options",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "90c7c28c-4767-4bbb-a97a-4c9039fc704f",
            "alias": "registration",
            "description": "registration flow",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "registration-page-form",
                "requirement": "REQUIRED",
                "priority": 10,
                "flowAlias": "registration form",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "d10c3c42-22a3-43cc-84c0-96b6657f5e4d",
            "alias": "registration form",
            "description": "registration form",
            "providerId": "form-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "registration-user-creation",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "registration-profile-action",
                "requirement": "REQUIRED",
                "priority": 40,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "registration-password-action",
                "requirement": "REQUIRED",
                "priority": 50,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "registration-recaptcha-action",
                "requirement": "DISABLED",
                "priority": 60,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          },
          {
            "id": "6b8ed08e-b2e8-4884-af34-f0d4e156c1e5",
            "alias": "reset credentials",
            "description": "Reset credentials for a user if they forgot their password or something",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "reset-credentials-choose-user",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "reset-credential-email",
                "requirement": "REQUIRED",
                "priority": 20,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "authenticator": "reset-password",
                "requirement": "REQUIRED",
                "priority": 30,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              },
              {
                "requirement": "CONDITIONAL",
                "priority": 40,
                "flowAlias": "Reset - Conditional OTP",
                "userSetupAllowed": false,
                "autheticatorFlow": true
              }
            ]
          },
          {
            "id": "220b66fe-40a9-4a50-bb48-fa2efd1fcf2e",
            "alias": "saml ecp",
            "description": "SAML ECP Profile Authentication Flow",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "http-basic-authenticator",
                "requirement": "REQUIRED",
                "priority": 10,
                "userSetupAllowed": false,
                "autheticatorFlow": false
              }
            ]
          }
        ],
        "authenticatorConfig": [
          {
            "id": "a47e7666-022c-4ea5-b964-77d9eafa7d04",
            "alias": "create unique user config",
            "config": {
              "require.password.update.after.registration": "false"
            }
          },
          {
            "id": "d2ee74f8-bd88-405e-b14d-dcb2b5ab33bb",
            "alias": "review profile config",
            "config": {
              "update.profile.on.first.login": "missing"
            }
          }
        ],
        "requiredActions": [
          {
            "alias": "CONFIGURE_TOTP",
            "name": "Configure OTP",
            "providerId": "CONFIGURE_TOTP",
            "enabled": true,
            "defaultAction": false,
            "priority": 10,
            "config": {}
          },
          {
            "alias": "terms_and_conditions",
            "name": "Terms and Conditions",
            "providerId": "terms_and_conditions",
            "enabled": false,
            "defaultAction": false,
            "priority": 20,
            "config": {}
          },
          {
            "alias": "UPDATE_PASSWORD",
            "name": "Update Password",
            "providerId": "UPDATE_PASSWORD",
            "enabled": true,
            "defaultAction": false,
            "priority": 30,
            "config": {}
          },
          {
            "alias": "UPDATE_PROFILE",
            "name": "Update Profile",
            "providerId": "UPDATE_PROFILE",
            "enabled": true,
            "defaultAction": false,
            "priority": 40,
            "config": {}
          },
          {
            "alias": "VERIFY_EMAIL",
            "name": "Verify Email",
            "providerId": "VERIFY_EMAIL",
            "enabled": true,
            "defaultAction": false,
            "priority": 50,
            "config": {}
          },
          {
            "alias": "update_user_locale",
            "name": "Update User Locale",
            "providerId": "update_user_locale",
            "enabled": true,
            "defaultAction": false,
            "priority": 1000,
            "config": {}
          }
        ],
        "browserFlow": "browser",
        "registrationFlow": "registration",
        "directGrantFlow": "direct grant",
        "resetCredentialsFlow": "reset credentials",
        "clientAuthenticationFlow": "clients",
        "dockerAuthenticationFlow": "docker auth",
        "attributes": {
          "clientOfflineSessionMaxLifespan": "0",
          "clientSessionIdleTimeout": "0",
          "clientSessionMaxLifespan": "0",
          "clientOfflineSessionIdleTimeout": "0"
        },
        "keycloakVersion": "11.0.0",
        "userManagedAccessAllowed": false
      }
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: keycloak
    labels:
      app: keycloak
      app.kubernetes.io/part-of: right-lyrics
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: keycloak
    template:
      metadata:
        labels:
          app: keycloak
      spec:
        volumes:
          - configMap:
              name: right-lyrics-realm
            name: right-lyrics-realm
        containers:
          - name: keycloak
            image: quay.io/keycloak/keycloak:11.0.0
            env:
              - name: KEYCLOAK_USER
                value: "admin"
              - name: KEYCLOAK_PASSWORD
                value: "admin"
              - name: KEYCLOAK_IMPORT
                value: /tmp/right-lyrics-realm.json
              - name: PROXY_ADDRESS_FORWARDING
                value: "true"
            ports:
              - name: http
                containerPort: 8080
              - name: https
                containerPort: 8443
            volumeMounts:
              - mountPath: /tmp/right-lyrics-realm.json
                name: right-lyrics-realm
                subPath: right-lyrics-realm.json
            readinessProbe:
              httpGet:
                path: /auth/realms/master
                port: 8080
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: keycloak
    name: keycloak
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: keycloak      
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: keycloak
    name: keycloak
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: keycloak
#
# Lyrics Page
# 
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: lyrics-page
  data:
    config.js: |
      window.SONGS_SERVICE = "http://songs-service-${NAMESPACE}.${WILDCARD_DOMAIN}/api/songs/";
      window.LYRICS_SERVICE = "http://lyrics-service-${NAMESPACE}.${WILDCARD_DOMAIN}/api/lyrics/";
      window.ALBUMS_SERVICE = "http://albums-service-${NAMESPACE}.${WILDCARD_DOMAIN}/api/albums/";
      window.KEYCLOAK_SERVICE = "http://keycloak-${NAMESPACE}.${WILDCARD_DOMAIN}/auth/";
      window.KEYCLOAK_CLIENT_ID = "lyrics-page";
      window.KEYCLOAK_REALM = "right-lyrics";
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: songs-service,lyrics-service,albums-service
    labels:
      app: lyrics-page
      app.openshift.io/runtime: nodejs
      app.kubernetes.io/part-of: right-lyrics
    name: lyrics-page
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: lyrics-page
    strategy:
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: lyrics-page
      spec:
        volumes:
          - configMap:
              name: lyrics-page
            name: lyrics-page
        containers:
          - image: quay.io/right-lyrics/lyrics-page:1.2
            imagePullPolicy: Always
            name: lyrics-page
            env:
              - name: NPM_RUN
                value: serve
            volumeMounts:
              - mountPath: /opt/app-root/src/build/config.js
                name: lyrics-page
                subPath: config.js
            ports:
              - containerPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: lyrics-page
    name: lyrics-page
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: lyrics-page
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: lyrics-page
    name: lyrics-page
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: lyrics-page
#
# Lyrics Service
#         
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: lyrics-mongodb
    name: lyrics-mongodb
  stringData:
    user: right-lyrics
    password: right-lyrics
    database: right-lyrics
  type: Opaque
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: lyrics-mongodb
      app.openshift.io/runtime: mongodb
      app.kubernetes.io/part-of: right-lyrics
    name: lyrics-mongodb
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: lyrics-mongodb
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: lyrics-mongodb
      spec:
        containers:
          - image: registry.access.redhat.com/rhscl/mongodb-36-rhel7
            imagePullPolicy: Always
            name: lyrics-mongodb
            ports:
              - containerPort: 6379
            env:
              - name: MONGODB_USER
                valueFrom:
                  secretKeyRef:
                    key: user
                    name: lyrics-mongodb
              - name: MONGODB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: lyrics-mongodb
              - name: MONGODB_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: lyrics-mongodb
              - name: MONGODB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database
                    name: lyrics-mongodb
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: lyrics-mongodb
    name: lyrics-mongodb
  spec:
    ports:
      - name: tcp-27017
        port: 27017
        protocol: TCP
        targetPort: 27017
    selector:
      app: lyrics-mongodb
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: lyrics-mongodb
    labels:
      app: lyrics-service
      app.openshift.io/runtime: nodejs
      app.kubernetes.io/part-of: right-lyrics
    name: lyrics-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: lyrics-service
    strategy:
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: lyrics-service
      spec:
        containers:
          - image: quay.io/right-lyrics/lyrics-service:1.1
            imagePullPolicy: Always
            name: lyrics-service
            env:
              - name: DB_HOST
                value: lyrics-mongodb
              - name: DB_NAME
                value: right-lyrics
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: lyrics-mongodb
                    key: password
              - name: DB_USERNAME
                value: right-lyrics
            ports:
              - containerPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: lyrics-service
    name: lyrics-service
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: lyrics-service              
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: lyrics-service
    name: lyrics-service
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: lyrics-service    
#
# Songs Service
#      
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: songs-postgresql
    name: songs-postgresql
  stringData:
    user: right-lyrics
    password: right-lyrics
    database: right-lyrics
  type: Opaque
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: songs-postgresql
      app.openshift.io/runtime: postgresql
      app.kubernetes.io/part-of: right-lyrics
    name: songs-postgresql
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: songs-postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: songs-postgresql
      spec:
        containers:
          - image: registry.access.redhat.com/rhscl/postgresql-96-rhel7
            imagePullPolicy: Always
            name: songs-postgresql
            ports:
              - containerPort: 5432
            env:
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    key: user
                    name: songs-postgresql
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: songs-postgresql
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database
                    name: songs-postgresql  
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: songs-postgresql
    name: songs-postgresql
  spec:
    ports:
      - name: tcp-5432
        port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      app: songs-postgresql
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: songs-postgresql,hits-service
    labels:
      app: songs-service
      version: v1
      app.openshift.io/runtime: spring
      app.kubernetes.io/part-of: right-lyrics
    name: songs-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: songs-service
        version: v1
    strategy:
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: songs-service
          version: v1
      spec:
        containers:
          - image: quay.io/right-lyrics/songs-service:1.2
            env:
              - name: SPRING_DATASOURCE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: songs-postgresql
                    key: password
              - name: SPRING_DATASOURCE_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: songs-postgresql
                    key: user
              - name: SPRING_DATASOURCE_URL
                value: jdbc:postgresql://songs-postgresql:5432/right-lyrics
              - name: HITS_SERVICE_URL
                value: http://hits-service:8080
            imagePullPolicy: Always
            name: songs-service
            ports:
              - containerPort: 8080                    
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: songs-service
    name: songs-service
  spec:
    ports:
      - name: tcp-8080
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: songs-service 
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: songs-service
    name: songs-service
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: songs-service
parameters:
- description: Wildcard Domain
  name: WILDCARD_DOMAIN
- description: Namespace
  name: NAMESPACE